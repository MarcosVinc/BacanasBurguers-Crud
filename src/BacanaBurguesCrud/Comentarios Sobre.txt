Interface : 
   é um tipo de classe que contém apenas as assinaturas de métodos, propriedades, eventos e indexadores.
		
	Assinatura de Método: 
		Os métodos são declarados em uma classe, structou interface especificando o nível de acesso, 
		como public ou private , modificadores opcionais, como abstract ou sealed , o valor de retorno,
		o nome do método e qualquer parâmetro de método. Juntas, essas partes são a assinatura do método.

			Structou:
			Structs ou structou são tipos de valor (semântica de valor). Structs are value types (Value semantics). Todos os tipos de struct herdam implicitamente da classe System. 
			A atribuição a uma variável de um tipo struct cria uma cópia do valor que está sendo atribuído (atribuição).

Generics : 
	contém interfaces e classes que definem coleções genéricas, 
	que permitem aos usuários criarem coleções fortemente tipadas que fornecem melhor segurança de tipos e 
	desempenho do que coleções não genéricas fortemente tipadas


Task:
	Uma tarefa (ou task) representa uma unidade de trabalho que deverá ser realizada. 
	Esta unidade de trabalho pode rodar em uma thread separada e é também possível iniciar uma task de forma 
	sincronizada a qual resulta em uma espera pela thread chamada.
		
		theread: Thread é uma forma de um processo dividir a si mesmo em duas ou mais tarefas, podendo executar elas concorrentemente. 
		O suporte a threads é oferecido pelos Sistemas Operacionais, ou por bibliotecas de algumas linguagens de programação.

List: 
	List é uma coleção de objetos que mantém a ordem em que eles foram adicionados.
	Com listas aprendemos como podemos armazenar, alterar, remover
		
		List<T>:
			O List(T) é uma coleção que possue a mesma característica dos ArrayLists, que é a de ser dinâmica, 
			e a característica dos Arrays que é de permitir um único tipo de dado. Vantagem sobre os Arrays: · Pode ser aumentado dinamicamente.
			Os List(T) são coleções que herdam da classe List(T), do namespace: System.

------------------------------------------------
                                       O QUE A APLICAÇÃO BacanaBurgues DEVE FAZER:
									  
Cadastrar produtos, remover e altera-los se necessario, com imagem. 

OPCIONAIS: 
	'1 dicionar clientes, remover e altera-los. 
	'2 Tela  para Mostrar em forma de uma "LISTA" os produtos ja cadastrados.
	'3 Cadastro e validação de Usuario.



Historicidade:

Op_ Cadastrar um usuario, com senha e login. E entrar na tela principal.
Pr_ Na tela principal clicar em cadastrar e fazer meu cadastro de produto com Nome, Preço e Imagem.jpg.
Pr_ Depois de feito o cadastro verificar se o item foi cadastrado com sucesso.
Pr_ Alterar o item ja cadastrado.
Pr_ Depois de feito a alteração  verificar se o item foi alterado com sucesso.
Pr_ Excluir o item ja cadastrado.
Pr_ Depois de excluir verificar se o item foi excluido com sucesso.
Op_ Na tela principal clicar em cadastrar cliente e fazer meu cadastro de Cliente com Nome, telefone.




  using System;

namespace BacanasBurgues.Entidades
{
    public class Produto
    {
        public string Nome { get; set; }
        public string Tipo { get; set; }
        public int Quantidade { get; set; }
        public double Preco { get; set; }
        public double Lucro { get; set; }
        //Nome: Nome do produto
        //Tipo: Em qual tipo esse produto se enquadra
        // Quantidade: Quantidade de produdo a ser adicionada
        // Preco: O preço do produto em si, sem o o adicional.
        // Lucro : E quantos porcentos  do valor o cliente quer adicionar ao produto.

        public Produto(double preco, string nome, string tipo, int quantidade)
        {
            Preco = preco;
            Nome = nome;
            Tipo = tipo;
            Quantidade = quantidade;
        }
    }
}
